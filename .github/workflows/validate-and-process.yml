name: Validate and Process EvalAI Challenge

on:
  push:
    branches:
      - challenge

permissions:
  contents: read
  issues: write

jobs:
  validate-host-config:
    runs-on: ubuntu-latest
    outputs:
      is_valid: ${{ steps.validate.outputs.is_valid }}
      is_localhost: ${{ steps.validate.outputs.is_localhost }}
      host_url: ${{ steps.validate.outputs.host_url }}
      requires_self_hosted: ${{ steps.validate.outputs.requires_self_hosted }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Validate host_config.json
        id: validate
        run: |
          echo "is_valid=true" >> $GITHUB_OUTPUT
          echo "is_localhost=false" >> $GITHUB_OUTPUT
          echo "requires_self_hosted=false" >> $GITHUB_OUTPUT
          echo "" > validation_error.log

          if ! [ -f "github/host_config.json" ]; then
            echo "‚ùå host_config.json not found in github/ directory" | tee -a validation_error.log
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          TOKEN=$(jq -r '.token' github/host_config.json)
          TEAM_PK=$(jq -r '.team_pk' github/host_config.json)
          HOST_URL=$(jq -r '.evalai_host_url' github/host_config.json)

          echo "host_url=$HOST_URL" >> $GITHUB_OUTPUT

          # Enhanced localhost detection
          if [[ "$HOST_URL" == *"127.0.0.1"* ]] || [[ "$HOST_URL" == *"localhost"* ]] || [[ "$HOST_URL" == *"0.0.0.0"* ]]; then
            echo "is_localhost=true" >> $GITHUB_OUTPUT
            echo "requires_self_hosted=true" >> $GITHUB_OUTPUT
            echo "üè† Localhost server detected: $HOST_URL"
            echo "ü§ñ Self-hosted runner required for local development"
            echo ""
            echo "üìã Requirements for local challenge creation:"
            echo "   ‚úÖ Self-hosted GitHub Actions runner must be configured"
            echo "   ‚úÖ EvalAI server must be running at: $HOST_URL"
            echo "   ‚úÖ Network connectivity between runner and server"
            echo ""
            echo "‚ö†Ô∏è  Note: GitHub hosted runners cannot connect to localhost"
            echo "‚ö†Ô∏è  This workflow will use your self-hosted runner instead"
          fi

          # Validate required fields
          if [[ -z "$TOKEN" || "$TOKEN" == "<evalai_user_auth_token>" ]]; then
            echo "‚ùå Invalid or missing token in host_config.json" | tee -a validation_error.log
            echo "üí° Please replace <evalai_user_auth_token> with your actual EvalAI token" | tee -a validation_error.log
            echo "is_valid=false" >> $GITHUB_OUTPUT
          fi

          if [[ -z "$TEAM_PK" || "$TEAM_PK" == "<host_team_pk>" ]]; then
            echo "‚ùå Invalid or missing team_pk in host_config.json" | tee -a validation_error.log
            echo "üí° Please replace <host_team_pk> with your actual team primary key" | tee -a validation_error.log
            echo "is_valid=false" >> $GITHUB_OUTPUT
          fi

          if [[ -z "$HOST_URL" || "$HOST_URL" == "<evalai_host_url>" ]]; then
            echo "‚ùå Invalid or missing evalai_host_url in host_config.json" | tee -a validation_error.log
            echo "üí° Please replace <evalai_host_url> with your EvalAI server URL" | tee -a validation_error.log
            echo "is_valid=false" >> $GITHUB_OUTPUT
          fi

      - name: Create issue if invalid
        if: steps.validate.outputs.is_valid == 'false'
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "‚ùå host_config.json validation failed"
          content-filepath: validation_error.log
          labels: |
            bug
            config
            self-hosted

      - name: Fail job if invalid
        if: steps.validate.outputs.is_valid == 'false'
        run: |
          echo "‚ùå host_config.json validation failed. See issue for details."
          exit 1

  check-self-hosted-requirements:
    needs: validate-host-config
    if: needs.validate-host-config.outputs.requires_self_hosted == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Self-hosted runner requirements check
        run: |
          echo "üè† LOCAL DEVELOPMENT MODE DETECTED"
          echo "=================================="
          echo ""
          echo "üìã To proceed with local challenge creation, ensure you have:"
          echo ""
          echo "1Ô∏è‚É£  Self-hosted GitHub Actions runner configured:"
          echo "   ‚Ä¢ Download runner from: https://github.com/${{ github.repository }}/settings/actions/runners"
          echo "   ‚Ä¢ Install and configure on your local machine"
          echo "   ‚Ä¢ Start the runner service"
          echo ""
          echo "2Ô∏è‚É£  EvalAI server running locally:"
          echo "   ‚Ä¢ Server URL: ${{ needs.validate-host-config.outputs.host_url }}"
          echo "   ‚Ä¢ Ensure it's accessible from your machine"
          echo "   ‚Ä¢ Verify API endpoints are responding"
          echo ""
          echo "3Ô∏è‚É£  Network connectivity:"
          echo "   ‚Ä¢ Runner can reach your EvalAI server"
          echo "   ‚Ä¢ No firewall blocking connections"
          echo ""
          echo "‚ö†Ô∏è  This job will continue on your self-hosted runner..."
          echo "‚ö†Ô∏è  If you don't have a self-hosted runner, the next job will fail"

  process-evalai-challenge:
    needs: [validate-host-config, check-self-hosted-requirements]
    if: |
      always() && 
      needs.validate-host-config.outputs.is_valid == 'true' &&
      (needs.check-self-hosted-requirements.result == 'success' || needs.check-self-hosted-requirements.result == 'skipped')
    runs-on: ${{ needs.validate-host-config.outputs.requires_self_hosted == 'true' && 'self-hosted' || 'ubuntu-latest' }}
    
    steps:
      - name: Checkout challenge branch
        uses: actions/checkout@v3
        with:
          ref: challenge

      - name: Environment Information
        run: |
          echo "üîç ENVIRONMENT INFORMATION"
          echo "========================="
          echo "Runner Type: ${{ needs.validate-host-config.outputs.requires_self_hosted == 'true' && 'Self-hosted' || 'GitHub-hosted' }}"
          echo "EvalAI URL: ${{ needs.validate-host-config.outputs.host_url }}"
          echo "Is Localhost: ${{ needs.validate-host-config.outputs.is_localhost }}"
          echo "OS: $(uname -s)"
          echo "Architecture: $(uname -m)"
          echo "Working Directory: $(pwd)"
          echo ""

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9.21

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f github/requirements.txt ]; then 
            echo "üì¶ Installing dependencies from github/requirements.txt"
            pip install -r github/requirements.txt
          else
            echo "‚ö†Ô∏è  No requirements.txt found in github/ directory"
          fi

      - name: Pre-flight Local Server Health Check
        if: needs.validate-host-config.outputs.is_localhost == 'true'
        run: |
          echo "üè• LOCAL SERVER HEALTH CHECK"
          echo "============================"
          
          SERVER_URL="${{ needs.validate-host-config.outputs.host_url }}"
          echo "üîç Checking EvalAI server at: $SERVER_URL"
          echo ""
          
          # Extract host and port from URL
          if [[ "$SERVER_URL" =~ http://([^:/]+):([0-9]+) ]]; then
            HOST="${BASH_REMATCH[1]}"
            PORT="${BASH_REMATCH[2]}"
          elif [[ "$SERVER_URL" =~ http://([^:/]+) ]]; then
            HOST="${BASH_REMATCH[1]}"
            PORT="80"
          else
            echo "‚ùå Unable to parse server URL: $SERVER_URL"
            exit 1
          fi
          
          echo "üåê Resolved to Host: $HOST, Port: $PORT"
          echo ""
          
          # Test basic connectivity
          echo "1Ô∏è‚É£  Testing basic connectivity..."
          if timeout 10 nc -z "$HOST" "$PORT" 2>/dev/null; then
            echo "   ‚úÖ Port $PORT is reachable on $HOST"
          else
            echo "   ‚ùå Port $PORT is NOT reachable on $HOST"
            echo "   üí° Make sure your EvalAI server is running and listening on $HOST:$PORT"
          fi
          
          # Test HTTP endpoint
          echo ""
          echo "2Ô∏è‚É£  Testing HTTP endpoint..."
          if curl -s --connect-timeout 10 --max-time 10 "$SERVER_URL/" > /dev/null 2>&1; then
            echo "   ‚úÖ HTTP endpoint is responding at $SERVER_URL"
            
            # Test API endpoint
            echo ""
            echo "3Ô∏è‚É£  Testing API endpoint..."
            API_URL="$SERVER_URL/api/"
            if curl -s --connect-timeout 10 --max-time 10 "$API_URL" > /dev/null 2>&1; then
              echo "   ‚úÖ API endpoint is accessible at $API_URL"
            else
              echo "   ‚ö†Ô∏è  API endpoint test failed, but server is responding"
              echo "   üí° This might be normal if API requires authentication"
            fi
          else
            echo "   ‚ùå HTTP endpoint is not responding at $SERVER_URL"
            echo ""
            echo "üö® TROUBLESHOOTING STEPS:"
            echo "   1. Verify your EvalAI server is running:"
            echo "      python manage.py runserver 0.0.0.0:8888"
            echo "   2. Check if the server is binding to the correct interface"
            echo "   3. Verify no firewall is blocking the connection"
            echo "   4. Check server logs for errors"
            echo ""
            echo "   If using Docker:"
            echo "      docker-compose up -d"
            echo "      docker-compose ps"
            echo ""
            exit 1
          fi
          
          echo ""
          echo "‚úÖ Pre-flight health check completed successfully!"

      - name: Validate challenge configuration
        run: |
          echo "üîç VALIDATING CHALLENGE CONFIGURATION"
          echo "====================================="
          python3 github/challenge_processing_script.py
        env:
          IS_VALIDATION: 'True'
          GITHUB_CONTEXT: ${{ toJson(github) }}
          GITHUB_AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}

      - name: Create or update challenge
        if: success()
        run: |
          echo "üöÄ CREATING/UPDATING CHALLENGE"
          echo "=============================="
          python3 github/challenge_processing_script.py
        env:
          IS_VALIDATION: 'False'
          GITHUB_CONTEXT: ${{ toJson(github) }}
          GITHUB_AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}

      - name: Success Summary
        if: success()
        run: |
          echo ""
          echo "üéâ CHALLENGE PROCESSING COMPLETED SUCCESSFULLY!"
          echo "=============================================="
          echo ""
          if [[ "${{ needs.validate-host-config.outputs.is_localhost }}" == "true" ]]; then
            echo "‚úÖ Local development mode: Challenge processed on self-hosted runner"
            echo "‚úÖ EvalAI server: ${{ needs.validate-host-config.outputs.host_url }}"
            echo "‚úÖ Self-hosted runner successfully connected to local server"
          else
            echo "‚úÖ Production mode: Challenge processed on GitHub-hosted runner"
            echo "‚úÖ EvalAI server: ${{ needs.validate-host-config.outputs.host_url }}"
          fi
          echo ""
          echo "üîç Check your EvalAI instance for the updated challenge configuration"

      - name: Failure Summary
        if: failure()
        run: |
          echo ""
          echo "‚ùå CHALLENGE PROCESSING FAILED"
          echo "=============================="
          echo ""
          if [[ "${{ needs.validate-host-config.outputs.is_localhost }}" == "true" ]]; then
            echo "üè† Local development mode detected"
            echo "üí° Common issues for self-hosted runners:"
            echo "   ‚Ä¢ EvalAI server not running or not accessible"
            echo "   ‚Ä¢ Self-hosted runner not properly configured"
            echo "   ‚Ä¢ Network connectivity issues between runner and server"
            echo "   ‚Ä¢ Invalid authentication credentials"
            echo ""
            echo "üîç Check the logs above for specific error details"
          else
            echo "‚òÅÔ∏è  GitHub-hosted runner mode"
            echo "üîç Check the logs above for specific error details"
          fi
